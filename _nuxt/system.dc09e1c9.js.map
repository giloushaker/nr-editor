{"version":3,"file":"system.dc09e1c9.js","sources":["../../../../components/SelectFolder.vue","../../../../pages/system.vue"],"sourcesContent":["<template>\n  <button @click=\"popFileInput\" class=\"bouton\" :disabled=\"uploading\" v-if=\"electron\">\n    <template v-if=\"!uploading\">Set Working Folder</template>\n    <template v-else> ... </template>\n  </button>\n  <span v-else>&lt;SelectFolder&gt; is only available in electron app</span>\n</template>\n\n<script lang=\"ts\">\nimport { showOpenDialog } from \"~/electron/node_helpers\";\nexport default {\n  emits: [\"selected\"],\n  data() {\n    return {\n      uploading: false,\n    };\n  },\n  computed: {\n    electron() {\n      return Boolean(global.electron);\n    },\n  },\n  methods: {\n    async popFileInput() {\n      if (!globalThis.electron) {\n        throw new Error(\"SelectFile is for use in electron app only\");\n      }\n      try {\n        this.uploading = true;\n        const result = await showOpenDialog({\n          properties: [\"openDirectory\"],\n        });\n        if (result?.filePaths?.length) {\n          this.$emit(\"selected\", result.filePaths);\n        }\n      } catch (e) {\n        console.error(e);\n      } finally {\n        this.uploading = false;\n      }\n    },\n  },\n};\n</script>\n<style scoped lang=\"scss\">\n.invisible {\n  opacity: 0; /* make transparent */\n  z-index: -1; /* move under anything else */\n  position: absolute; /* don't let it take up space */\n}\n</style>\n","<template>\n  <div class=\"scrollable\" v-if=\"!loading\">\n    <div class=\"mt-10px p-10px\">\n      <div\n        >Working Folder: <span class=\"workdir\">{{ settings.systemsFolder }}</span></div\n      >\n\n      <div class=\"boutons\">\n        <SelectFile @uploaded=\"uploaded\" />\n        <SelectFolder @selected=\"selectedFolder\" />\n        <CreateSystem @created=\"update\" />\n      </div>\n\n      <p\n        >You can open a system by clicking any of the systems in your working folder, listed below, or click Load System\n        to load a system outside this folder.</p\n      >\n    </div>\n    <div class=\"p-10px\">\n      <div\n        v-for=\"system in systems\"\n        class=\"item p-2px mt-2px cursor-pointer\"\n        :class=\"{ highlight: system.highlight }\"\n        @click=\"selected(system)\"\n      >\n        {{ system.name }}\n      </div>\n    </div>\n  </div>\n  <Loading v-else :progress_msg=\"progress_msg\" :progress_max=\"progress_max\" :progress=\"progress\" />\n</template>\n\n<script lang=\"ts\">\nimport { sortByAscending } from \"~/assets/shared/battlescribe/bs_helpers\";\nimport { BSIDataCatalogue, BSIDataSystem } from \"~/assets/shared/battlescribe/bs_types\";\nimport { getFolderFolders, getPath } from \"~/electron/node_helpers\";\nimport { useCataloguesStore } from \"~/stores/cataloguesState\";\nimport { useEditorStore } from \"~/stores/editorStore\";\nimport { useSettingsStore } from \"~/stores/settingsState\";\nimport CreateSystem from \"~/components/CreateSystem.vue\";\nimport Loading from \"~/components/Loading.vue\";\nimport { getDataDbId } from \"~/assets/shared/battlescribe/bs_main\";\nexport default defineComponent({\n  components: { CreateSystem, Loading },\n  head() {\n    return {\n      title: \"NR-Editor\",\n    };\n  },\n  data() {\n    return {\n      loading: true,\n      systems: [] as Array<{ name: string; path: string; highlight?: boolean }>,\n      progress: 0,\n      progress_max: 0,\n      progress_msg: \"\",\n      error_msg: \"\",\n    };\n  },\n  setup() {\n    return { cataloguesStore: useCataloguesStore(), store: useEditorStore(), settings: useSettingsStore() };\n  },\n\n  methods: {\n    async selectedFolder(folder: string[]) {\n      this.settings.systemsFolder = Array.isArray(folder) ? folder[0] : folder;\n      this.update();\n    },\n    async selected(item: { name: string; path: string }) {\n      if (electron) {\n        this.loading = true;\n        this.progress_msg = \"\";\n        const loaded = await this.store.load_systems_from_folder(item.path, async (cur, max, msg) => {\n          this.progress = cur;\n          this.progress_max = max;\n          this.progress_msg = msg ? msg.replaceAll(\"\\\\\", \"/\").split(\"/\").slice(-1)[0] : \"\";\n          const promise = new Promise((resolve) => setTimeout(resolve, 1));\n          return promise;\n        });\n        this.loading = false;\n        this.$router.push(`/?id=${loaded.join(\",\")}`);\n      }\n    },\n    async uploaded(files: any[]) {\n      console.log(\"Uploaded\", files.length, \"files\", files);\n      const systems = files.filter((o) => o.gameSystem) as BSIDataSystem[];\n      const ids = [];\n      for (const system of systems) {\n        const systemId = system.gameSystem.id;\n        ids.push(systemId);\n        const dbId = getDataDbId(system);\n        this.store.get_system(systemId).setSystem(system);\n        if (!electron) {\n          db.systems.put({ content: system, id: dbId });\n        }\n        this.cataloguesStore.updateCatalogue(system.gameSystem);\n        this.cataloguesStore.setEdited(dbId, false);\n      }\n\n      const catalogues = files.filter((o) => o.catalogue) as BSIDataCatalogue[];\n      for (const catalogue of catalogues) {\n        const systemId = catalogue.catalogue.gameSystemId;\n        this.store.get_system(systemId).setCatalogue(catalogue);\n        if (!electron) {\n          db.catalogues.put({ content: catalogue, id: getDataDbId(catalogue) });\n        }\n        this.cataloguesStore.updateCatalogue(catalogue.catalogue);\n        this.cataloguesStore.setEdited(getDataDbId(catalogue), false);\n      }\n      this.$router.push(`/?id=${ids.join(\",\")}`);\n    },\n    async update(highlight?: GameSystemFiles) {\n      try {\n        const result = [] as Array<{ name: string; path: string }>;\n        if (!electron) {\n          // const repos = await fetch_bs_repos_datas(true);\n          // for (const repo of repos.repositories) {\n          // result.push({ name: repo.name, path: repo.repositoryUrl });\n          // }\n          for (let i = 0; i < 100; i++) {\n            result.push({ name: \"Warhammer 40k\", path: \"BSData/wh40k\" });\n          }\n        } else {\n          if (this.settings.systemsFolder) {\n            const systems = await getFolderFolders(this.settings.systemsFolder);\n            if (systems) {\n              result.push(...systems);\n            }\n          } else {\n            const home = await getPath(\"home\");\n            const systems = await getFolderFolders(`${home}/BattleScribe/data`);\n            if (systems) {\n              result.push(...systems);\n            }\n          }\n        }\n        this.systems = sortByAscending(result, (o) => o.name);\n        this.systems.forEach((o) => {\n          o.highlight = o.name === highlight?.gameSystem?.gameSystem?.name;\n        });\n      } finally {\n        this.loading = false;\n      }\n    },\n  },\n\n  async mounted() {\n    if (!this.settings.systemsFolder) {\n      const home = await getPath(\"home\");\n      this.settings.systemsFolder = `${home}/BattleScribe/data`;\n    }\n\n    await this.update();\n  },\n});\n</script>\n<style lang=\"scss\" scoped>\n@import \"@/shared_components/css/vars.scss\";\n.item {\n  border: 1px solid $box_border;\n}\n.item:hover {\n  background-color: rgba(0, 0, 0, 0.15);\n}\n.highlight {\n  background-color: rgba(0, 0, 0, 0.5);\n}\n\n.workdir {\n  font-weight: bold;\n}\n\np {\n  font-style: italic;\n  margin-top: 10px;\n}\n</style>\n"],"names":["_sfc_main$1","result","showOpenDialog","_a","e","_ctx","_cache","$props","$setup","$data","$options","_openBlock","_createElementBlock","args","_Fragment","_sfc_main","CreateSystem","Loading","useCataloguesStore","useEditorStore","useSettingsStore","folder","item","loaded","cur","max","msg","resolve","files","systems","o","ids","system","systemId","dbId","getDataDbId","catalogues","catalogue","highlight","getFolderFolders","home","getPath","i","sortByAscending","_b","_hoisted_1","_hoisted_2","_hoisted_4","_component_Loading","__nuxt_component_3","_createBlock","_createElementVNode","_createTextVNode","_hoisted_3","_toDisplayString","_createVNode","_component_SelectFile","_component_SelectFolder","_component_CreateSystem","_hoisted_5","_hoisted_6","_renderList","_normalizeClass","$event"],"mappings":"kUAUA,MAAeA,EAAA,CACb,MAAO,CAAC,UAAU,EAClB,MAAO,CACE,MAAA,CACL,UAAW,EAAA,CAEf,EACA,SAAU,CACR,UAAW,CACF,MAAA,EAAA,WAAe,QACxB,CACF,EACA,QAAS,CACP,MAAM,cAAe,OACf,GAAA,CAAC,WAAW,SACR,MAAA,IAAI,MAAM,4CAA4C,EAE1D,GAAA,CACF,KAAK,UAAY,GACX,MAAAC,EAAS,MAAMC,EAAe,CAClC,WAAY,CAAC,eAAe,CAAA,CAC7B,GACGC,EAAAF,GAAA,YAAAA,EAAQ,YAAR,MAAAE,EAAmB,QAChB,KAAA,MAAM,WAAYF,EAAO,SAAS,QAElCG,GACP,QAAQ,MAAMA,CAAC,CAAA,QACf,CACA,KAAK,UAAY,EACnB,CACF,CACF,CACF,4CAzCEC,EAGSC,EAAAC,EAAAC,EAAAC,EAAAC,EAAA,CAHK,OAAAA,EAAA,UAAAC,EAAA,EAAAC,EAAA,SAAA,CAAgB,IAAK,EAAW,QAAQN,EAAE,CAAS,IAAAA,EAAA,CAAA,EAAA,IAAAO,IAAAH,EAAA,cAAAA,EAAA,aAAA,GAAAG,CAAA,GAAA,MAAA,SAC9C,SAAAJ,EAAA,SAAA,EAAA,cACgBE,IAAAC,EAAAE,EAAA,CAAA,IAAA,GAAA,sCAAjC,oBAAiC,CAAA,EAAA,EAAA,2ICuCtBC,IAAgB,CAC7B,WAAY,CAAA,aAAEC,EAAA,QAAcC,CAAQ,EACpC,MAAO,CACE,MAAA,CACL,MAAO,WAAA,CAEX,EACA,MAAO,CACE,MAAA,CACL,QAAS,GACT,QAAS,CAAC,EACV,SAAU,EACV,aAAc,EACd,aAAc,GACd,UAAW,EAAA,CAEf,EACA,OAAQ,CACC,MAAA,CAAE,gBAAiBC,IAAsB,MAAOC,IAAkB,SAAUC,EAAA,EACrF,EAEA,QAAS,CACP,MAAM,eAAeC,EAAkB,CAChC,KAAA,SAAS,cAAgB,MAAM,QAAQA,CAAM,EAAIA,EAAO,CAAC,EAAIA,EAClE,KAAK,OAAO,CACd,EACA,MAAM,SAASC,EAAsC,CACnD,GAAI,SAAU,CACZ,KAAK,QAAU,GACf,KAAK,aAAe,GACd,MAAAC,EAAS,MAAM,KAAK,MAAM,yBAAyBD,EAAK,KAAM,MAAOE,EAAKC,EAAKC,KACnF,KAAK,SAAWF,EAChB,KAAK,aAAeC,EACpB,KAAK,aAAeC,EAAMA,EAAI,WAAW,KAAM,GAAG,EAAE,MAAM,GAAG,EAAE,MAAM,EAAE,EAAE,CAAC,EAAI,GAC9D,IAAI,QAASC,GAAY,WAAWA,EAAS,CAAC,CAAC,EAEhE,EACD,KAAK,QAAU,GACf,KAAK,QAAQ,KAAK,QAAQJ,EAAO,KAAK,GAAG,GAAG,EAEhD,EACA,MAAM,SAASK,EAAc,CAC3B,QAAQ,IAAI,WAAYA,EAAM,OAAQ,QAASA,CAAK,EACpD,MAAMC,EAAUD,EAAM,OAAQE,GAAMA,EAAE,UAAU,EAC1CC,EAAM,CAAA,EACZ,UAAWC,KAAUH,EAAS,CACtB,MAAAI,EAAWD,EAAO,WAAW,GACnCD,EAAI,KAAKE,CAAQ,EACX,MAAAC,EAAOC,EAAYH,CAAM,EAC/B,KAAK,MAAM,WAAWC,CAAQ,EAAE,UAAUD,CAAM,EAC3C,UACH,GAAG,QAAQ,IAAI,CAAE,QAASA,EAAQ,GAAIE,EAAM,EAEzC,KAAA,gBAAgB,gBAAgBF,EAAO,UAAU,EACjD,KAAA,gBAAgB,UAAUE,EAAM,EAAK,EAG5C,MAAME,EAAaR,EAAM,OAAQE,GAAMA,EAAE,SAAS,EAClD,UAAWO,KAAaD,EAAY,CAC5B,MAAAH,EAAWI,EAAU,UAAU,aACrC,KAAK,MAAM,WAAWJ,CAAQ,EAAE,aAAaI,CAAS,EACjD,UACA,GAAA,WAAW,IAAI,CAAE,QAASA,EAAW,GAAIF,EAAYE,CAAS,CAAA,CAAG,EAEjE,KAAA,gBAAgB,gBAAgBA,EAAU,SAAS,EACxD,KAAK,gBAAgB,UAAUF,EAAYE,CAAS,EAAG,EAAK,EAE9D,KAAK,QAAQ,KAAK,QAAQN,EAAI,KAAK,GAAG,GAAG,CAC3C,EACA,MAAM,OAAOO,EAA6B,CACpC,GAAA,CACF,MAAMrC,EAAS,CAAA,EACf,GAAK,SASC,GAAA,KAAK,SAAS,cAAe,CAC/B,MAAM4B,EAAU,MAAMU,EAAiB,KAAK,SAAS,aAAa,EAC9DV,GACK5B,EAAA,KAAK,GAAG4B,CAAO,MAEnB,CACC,MAAAW,EAAO,MAAMC,EAAQ,MAAM,EAC3BZ,EAAU,MAAMU,EAAiB,GAAGC,qBAAwB,EAC9DX,GACK5B,EAAA,KAAK,GAAG4B,CAAO,MAb1B,SAASa,EAAI,EAAGA,EAAI,IAAKA,IACvBzC,EAAO,KAAK,CAAE,KAAM,gBAAiB,KAAM,eAAgB,EAgB/D,KAAK,QAAU0C,EAAgB1C,EAAS,GAAM,EAAE,IAAI,EAC/C,KAAA,QAAQ,QAAS,GAAM,SAC1B,EAAE,UAAY,EAAE,SAAS2C,GAAAzC,EAAAmC,GAAA,YAAAA,EAAW,aAAX,YAAAnC,EAAuB,aAAvB,YAAAyC,EAAmC,KAAA,CAC7D,CAAA,QACD,CACA,KAAK,QAAU,EACjB,CACF,CACF,EAEA,MAAM,SAAU,CACV,GAAA,CAAC,KAAK,SAAS,cAAe,CAC1B,MAAAJ,EAAO,MAAMC,EAAQ,MAAM,EAC5B,KAAA,SAAS,cAAgB,GAAGD,sBAGnC,MAAM,KAAK,QACb,CACF,CAAC,gDAzJMK,EAAM,CAAA,IAAA,sBAMFC,EAAA,CAAA,MAAM,sCAWRC,EAAA,CAAA,MAAM,sQAjByBC,EAAAC,EACpC,OAAA5C,EAAA,SA2BeM,EAAA,EAAYuC,EAAEF,EAAY,CAAG,IAAA,EAA6B,aAAU3C,EAAA,aAAA,aAAAA,EAAA,uFA3BnFM,EAGG,EAAAC,EAAA,MAAAiC,EAAA,CAAAM,EAAA,MADEL,EAAgB,CAAAK,EAAA,MAAyD,KAAzD,CAAAC,EAAA,kBAAA,EAGnBD,EAIM,OAJNE,EAIMC,EAAAjD,EAAA,SAAA,aAAA,EAAA,CAAA,CAAA,CAAA,EAFuC8C,EAAA,MAAAJ,EAAA,CAC3CQ,EAAkCC,EAAZ,CAAA,WAAAnD,EAAE,QAAM,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAAAkD,EAAAE,EAAA,CAAA,WAAApD,EAAA,cAAA,EAAA,KAAA,EAAA,CAAA,YAAA,CAAA,EAGhCkD,EAGCG,EAAA,CAAA,UAAArD,EAAA,MAAA,EAAA,KAAA,EAAA,CAAA,WAAA,CAAA,CAAA,CAAA,EAEHsD,CAAA,CAAA,EACER,EAAA,MAAAS,EAAA,EAAAjD,EAEO,EAAC,EAAAC,EAAAE,EAAA,KAAA+C,EAAkCxD,EACnB,QAAM2B,IAC1BrB,EAAA,EAAOC,EAAe,MAAA,CAAA,MAAAkD,EAEpB,CAAM,mCAAK,CAAA,UAAA9B,EAAA,SAAA,CAAA,CAAA,EAAA,QAAA+B,GAAA1D,EAAA,SAAA2B,CAAA,4BAIH,CAAA"}